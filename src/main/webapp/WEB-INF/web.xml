<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    // Web容器上下文参数contextConfigLocation
    // 从类路径下加载Spring配置文件，这样位于Web层的Spring容器(WebApplicationContext)与位于业务层的Spring容器(ApplicationContext)
    // 建立了关联，以使Web层的Bean可以调用业务层的Bean
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!--此处不需要持久层的配置文件(classpath:mybatis-config.xml)，因为此项目Web层的Bean只调用了业务层的Bean-->
        <!--<param-value>classpath:smart-context.xml, classpath:mybatis-config.xml</param-value>-->
        <param-value>classpath:smart-context.xml</param-value>
    </context-param>

    // 1、用于启动WebApplicationContext的Web容器监听器：org.springframework.web.context.ContextLoaderListener
    // 内部实现了启动WebApplicationContext实例的逻辑
    // 2、指定Spring所提供的的ContextLoaderListener的Web容器监听器，该监听器在Web容器启动时自动运行，
    // 它会根据contextConfigLocation Web容器上下文参数获取Spring配置文件，并启动Spring容器。
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>

    // 配置DispatcherServlet为SpringMVC的前端Servlet
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>3</load-on-startup> //启动顺序
    </servlet>

    // 指定DispatcherServlet截获特定的URL请求
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>

    <!-- 过滤器：解决中文乱码-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
