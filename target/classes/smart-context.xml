<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">


    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.smarter.dao"></context:component-scan>
    <context:component-scan base-package="com.smarter.service"></context:component-scan>

    <!-- 配置数据源 -->
    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"-->
          <!--destroy-method="close"-->
          <!--p:driverClassName="com.mysql.jdbc.Driver"-->
          <!--p:url="jdbc:mysql://localhost:3306/sampledb"-->
          <!--p:username="root"-->
          <!--p:password="123456" />-->
    <bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/sampledb?serverTimezone=GMT%2B8"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>

    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="datasource"></property>-->
    <!--</bean>-->

    <!-- 配置Jdbc模板  -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource-ref="datasource">
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>

    <!--配置事务相关的AOP切面-->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression="(within(com.smarter.service.*)) and
            (@annotation(org.springframework.transaction.annotation.Transactional))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"></aop:advisor>
    </aop:config>

    <!--事务增强，需要事务管理器的支持-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--与事务属性关联的方法名-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--以下为Mybatis配置-->
    <!--通过Spring风格创建MyBatis的SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="datasource"></property>

        <!--指定Mybatis的总装配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>

        <!--扫描式加载SQL映射文件，不需要在mybatis-config.xml中分别组装所有映射文件-->
        <!--SqlSessionFactoryBean将扫描tk/mybatis/simple/mapper类路径并加载所有以.xml为后缀的映射文件-->
        <property name="mapperLocations" value="classpath:com/smarter/mybatis/mapper/*.xml"></property>
    </bean>

    <!--mybatis-spring提供一个转换器MapperScannerConfigurer-->
    <!--它可以将映射接口直接转换为Spring容器中的Bean，这样就可以在Service中注入映射接口的Bean了-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>

        <!--MapperScannerConfigurer将扫描basePackage所指定的包下的所有接口类(包括子包)-->
        <!--如果它们在SQL映射文件中定义过，则将为它们动态定义为一个Spring Bean-->
        <!--这样就可以在Service中直接注入映射接口的Bean了-->
        <property name="basePackage" value="com.smarter.dao.mybatis"></property>
    </bean>

</beans>

   <!--execution(* com.smart.service..*(..))-->
     <!-- = 匹配com.smart.service包及子孙包下所有类的所有方法-->
       <!--1 * 返回类型-->
       <!--2 com.smart.service 包-->
       <!--3 .. 及子孙包 PS:(.)不包含子孙包-->
       <!--4 * 所有方法-->
       <!--5 (..) 参数类型.. 任意-->
